{
  "version": 3,
  "file": "home.css",
  "sources": [
    "../home.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport io_wrapper from './socket.io.js';\n\timport Sodium from './sodium.js';\n\tconst authToken = localStorage.getItem('authToken');\n\tconst publicKey = localStorage.getItem('publicKey');\n\t//below snippet from:\n\t//https://stackoverflow.com/questions/179355/clearing-all-cookies-with-javascript\n\tfunction deleteAllCookies() {\n\t    const cookies = document.cookie.split(\";\");\n\t    for (var i = 0; i < cookies.length; i++) {\n\t    \tconst cookie = cookies[i];\n\t        const eqPos = cookie.indexOf(\"=\");\n\t        const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\n\t        document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n\t    }\n\t}\n\tconst end_session = () =>{\n\t\tlocalStorage.clear();\n\t\tdeleteAllCookies();\n\t\twindow.locatio.href = \"/login\";\n\t}\n\tconst ajax_json_req = (req_obj, path) =>{\n\t\tconsole.log(path);\n\t\treturn new Promise((res, rej)=>{\n\t\t\tlet req = new XMLHttpRequest();\n\t\t\treq.open(\"POST\", path, true);\n\t\t\treq.setRequestHeader(\"Content-Type\", \"application/json\");\n\t\t\treq.send(JSON.stringify(req_obj));\n\t\t\treq.onreadystatechange = () =>{\n\t\t\t\tif(req.readyState != XMLHttpRequest.DONE) return;\n\t\t\t\tif(req.status !== 200) rej(new Error('Error ' + req.status.toString()));\n\t\t\t\tlet response_obj = JSON.parse(req.response);\n\t\t\t\tif(response_obj.hasOwnProperty('authStatus')){\n\t\t\t\t\tif(response_obj.authStatus !== true){\n\t\t\t\t\t\tend_session();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(response_obj.hasOwnProperty('error')) rej(new Error(response_obj.error));\n\t\t\t\tres(response_obj);\n\t\t\t};\n\t\t}).catch((err)=>{\n\t\t\t//must investigate how to do this properly\n\t\t\tconsole.error(err.message);\n\t\t});\n\t}\n\tlet crypto_box_keypair;\n\tlet crypto_box_seed_keypair;\n\tlet crypto_box_seal;\n\tlet crypto_box_seal_open;\n\tlet from_string;\n\tlet from_hex;\n\tlet to_string;\n\tlet to_hex;\n\tlet sodium_set = false;\n\tlet ajax_c_priv_key;\n\tlet ajax_c_pub_key;\n\tlet ajax_s_pub_key;\n\tlet ajax_id_token;\n\tSodium.sodium.ready.then(async (res, ref)=>{\n\t    crypto_box_keypair = Sodium.sodium.crypto_box_keypair;\n\t    crypto_box_seed_keypair = Sodium.sodium.crypto_box_seed_keypair;\n\t    crypto_box_seal = Sodium.sodium.crypto_box_seal;\n\t    crypto_box_seal_open = Sodium.sodium.crypto_box_seal_open;\n\t    from_string = Sodium.sodium.from_string;\n\t    from_hex = Sodium.sodium.from_hex;\n\t    to_string = Sodium.sodium.to_string;\n\t    to_hex = Sodium.sodium.to_hex;\n\t    sodium_set = true;\n\t    let keypair = crypto_box_keypair();\n\t    ajax_c_priv_key = keypair.privateKey;\n\t    ajax_c_pub_key = keypair.publicKey;\n\t    const req_obj = {\n\t    \tpublicKey:to_hex(ajax_c_pub_key)\n\t    };\n\t    let req = ajax_json_req(req_obj, '/keypair_req');\n\t    let res_obj;\n\t    try{\n\t    \tres_obj = await req;\n\t    }\n\t    catch(err){\n\t    \treturn console.error(err.message);\n\t    }\n\t    console.log(res_obj.publicKey);\n\t    ajax_s_pub_key = from_hex(res_obj.publicKey);\n\t    ajax_id_token = res_obj.idToken;\n\t});\n\tconst s_ajax_json_req = (req_obj, path)=>{\n\t\tconsole.log(path);\n\t\tif(!sodium_set) return console.error('Sodium library not yet loaded');\n\t\tif(!ajax_id_token) return console.error('cannot make secure request without server public key');\n\t\treturn new Promise((res, rej)=>{\n\t\t\tconst make_request = () =>{\n\t\t\t\tconst req_digest = crypto_box_seal(from_string(JSON.stringify(req_obj)), ajax_s_pub_key);\n\t\t\t\tconst to_send = {\n\t\t\t\t\tencryptedObject:{\n\t\t\t\t\t\tidToken:ajax_id_token,\n\t\t\t\t\t\tdigest:to_hex(req_digest)\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tlet req = new XMLHttpRequest();\n\t\t\t\treq.open(\"POST\", path, true);\n\t\t\t\treq.setRequestHeader(\"Content-Type\", \"application/json\");\n\t\t\t\treq.send(JSON.stringify(to_send));\n\t\t\t\treq.onreadystatechange = async () =>{\n\t\t\t\t\tif(req.readyState != XMLHttpRequest.DONE) return;\n\t\t\t\t\tif(req.status !== 200) rej(new Error('Error ' + req.status.toString()));\n\t\t\t\t\tlet response_obj = JSON.parse(req.response);\n\t\t\t\t\tif(response_obj.hasOwnProperty('authStatus')){\n\t\t\t\t\t\tif(response_obj.authStatus !== true){\n\t\t\t\t\t\t\tend_session();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(response_obj.hasOwnProperty('keypairStatus')){\n\t\t\t\t\t\tif(response_obj.keypairStatus !== true){\n\t\t\t\t\t\t\t//technically can infinite loop here if there's an issue with the server\n\t\t\t\t\t\t\t//possibly need to lock s_ajax_json_req function while this is occurring\n\t\t\t\t\t\t\tlet promise = ajax_json_req(req_obj, '/keypair_req');\n\t\t\t\t\t\t\tlet keypair = crypto_box_keypair();\n\t\t\t\t\t\t\tajax_c_priv_key = keypair.privateKey;\n\t\t\t\t\t\t\tajax_c_pub_key = keypair.publicKey;\n\t\t\t\t\t\t\tlet promise_rv;\n\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\tpromise_rv = await promise;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch(err){\n\t\t\t\t\t\t\t\treturn console.error(err.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tajax_s_pub_key = promise_rv.publicKey;\n\t\t\t\t\t\t\tajax_id_token = promise_rv.idToken;\n\t\t\t\t\t\t\treturn make_request();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(response_obj.hasOwnProperty('error')) rej(new Error(response_obj.error));\n\t\t\t\t\t//at later point this response object will be encrypted\n\t\t\t\t\tres(response_obj);\n\t\t\t\t};\n\t\t\t};\n\t\t\tmake_request();\n\t\t});\n\t};\n\tconst privateKey = localStorage.getItem('privateKey');\n\tif(privateKey == null){\n\t\tend_session();\n\t}\n\tlet username = localStorage.getItem('username');\n\tif(username == null){\n\t\tconst get_username = async () =>{\n\t\t\tlet req_obj = {\n\t\t\t\tauthToken:authToken\n\t\t\t};\n\t\t\tlet promise = s_ajax_json_req(req_obj, '/user_req', true);\n\t\t\tlet res_obj;\n\t\t\ttry{\n\t\t\t\tres_obj = await promise;\n\t\t\t}\n\t\t\tcatch(err){\n\t\t\t\tconsole.error(err.message);\n\t\t\t}\n\t\t\tusername = res_obj.username;\n\t\t\tlocalStorage.setItem('username', username);\n\t\t};\n\t\tget_username();\n\t}\n\tlet conversation_list = [];\n\tlet conversation_refs = {};\n\tconst conversation_obj_prototype = {\n\t\tid:-1,\n\t\tname:'default_name',\n\t\tlast_msg_sender:'default_sender',\n\t\tlast_msg:'default_msg',\n\t\tkeys:{}\n\t};\n\n\tlet message_list = [];\n\tconst message_obj_prototype = {\n\t\tsender:'username-here',\n\t\tcontents:'contents of message goes here',\n\t\ttime:'formatted time string goes here',\n\t\tfrom_you:false\n\t};\n\tlet messages_ref;\n\tlet curr_message;\n\tlet curr_convo_obj;\n\tconst get_fmtted_time = (date_obj) =>{\n\t\tconst year = (1900 + date_obj.getYear()).toString();\n\t\tconst month = ('0' + (1 + date_obj.getMonth()).toString()).slice(-2);\n\t\tconst day = date_obj.getDate().toString();\n\t\tconst hours = ('0' + date_obj.getHours().toString()).slice(-2);\n\t\tconst minutes = ('0' + date_obj.getMinutes().toString()).slice(-2);\n\t\tconst seconds = ('0' + date_obj.getSeconds().toString()).slice(-2);\n\t\treturn year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;\n\t};\n\tconst digest_obj_prototype = {\n\t\tid:-1,\n\t\tdigest:'deadd0d0'\n\t};\n\tconst populate_convos = async () =>{\n\t\tlet req_obj = {\n\t\t\tauthToken:authToken\n\t\t};\n\t\tlet promise = s_ajax_json_req(req_obj, '/convo_req');\n\t\tlet res_obj;\n\t\ttry{\n\t\t\tres_obj = await promise;\n\t\t}\n\t\tcatch (err){\n\t\t\tconsole.error(err.message);\n\t\t\treturn;\n\t\t}\n\t\tfor(let i = 0; i < res_obj.conversationObjects.length; i++){\n\t\t\tlet new_convo_obj = Object.create(conversation_obj_prototype);\n\t\t\tnew_convo_obj.id = res_obj.conversationObjects[i].id;\n\t\t\tnew_convo_obj.name = res_obj.conversationObjects[i].name;\n\t\t\t//not decrypting digest for now\n\t\t\tnew_convo_obj.last_msg = res_obj.conversationObjects[i].last_msg_digest;\n\t\t\treq_obj = {\n\t\t\t\tauthToken:authToken,\n\t\t\t\tconversationID:new_convo_obj.id\n\t\t\t};\n\t\t\tpromise = s_ajax_json_req(req_obj, '/keys_req');\n\t\t\tlet keys_obj;\n\t\t\ttry{\n\t\t\t\tkeys_obj = await promise;\n\t\t\t}\n\t\t\tcatch(err){\n\t\t\t\tconsole.error(err.message);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnew_convo_obj.keys = keys_obj;\n\t\t\tconversation_refs[new_convo_obj.id] = new_convo_obj;\n\t\t\tconversation_list.push(new_convo_obj);\n\t\t}\n\t\tconversation_list = conversation_list;\n\t};\n\tpopulate_convos();\n\n\tlet display_add_account = false;\n\tconst display_add = () =>{\n\t\tdisplay_add_account = true;\n\t};\n\tconst close_add = () =>{\n\t\tdisplay_add_account = false;\n\t}\n\n\tlet participants;\n\tlet new_conversation_name;\n\tconst create_convo = async () =>{\n\t\tlet req_participants = participants.replace(/ /g,'').split(',');\n\t\treq_participants.push(username);\n\t\tlet req_obj = {\n\t\t\tauthToken:authToken,\n\t\t\tparticipants:req_participants\n\t\t};\n\t\tif(new_conversation_name.length > 0) req_obj.name=new_conversation_name;\n\t\tlet promise = s_ajax_json_req(req_obj, '/conversation_create');\n\t\tlet response_obj;\n\t\ttry{\n\t\t\tresponse_obj = await promise;\n\t\t}\n\t\tcatch(err){\n\t\t\talert(err.message);\n\t\t\treturn;\n\t\t}\n\t\tconst convo_id = response_obj.conversationID;\n\t\tconst name = response_obj.name;\n\t\treq_obj = {\n\t\t\tauthToken:authToken,\n\t\t\tconversationID:convo_id\n\t\t};\n\t\tpromise = s_ajax_json_req(req_obj, '/keys_req');\n\t\ttry{\n\t\t\tresponse_obj = await promise;\n\t\t}\n\t\tcatch(err){\n\t\t\talert(err.message);\n\t\t\treturn;\n\t\t}\n\t\tconst keys = response_obj\n\t\treq_obj = {\n\t\t\tauthToken:authToken,\n\t\t\tconversationID:convo_id\n\t\t};\n\t\tpromise = s_ajax_json_req(req_obj, '/last_msg_req');\n\t\ttry{\n\t\t\tresponse_obj = await promise;\n\t\t}\n\t\tcatch(err){\n\t\t\talert(err.message);\n\t\t\treturn;\n\t\t}\n\t\t//for now not decrypting digests until everything is built\n\t\t//so build times aren't 15 seconds\n\t\tconst digest = response_obj.digest;\n\t\tconst new_convo_obj = Object.create(conversation_obj_prototype);\n\t\tnew_convo_obj.id = convo_id;\n\t\tnew_convo_obj.name = name;\n\t\tnew_convo_obj.last_msg = digest;\n\t\tnew_convo_obj.keys = keys;\n\t\tconversation_list.push(new_convo_obj);\n\t\t//updating because svelte\n\t\tconversation_list = conversation_list;\n\t\tdisplay_add_account = false;\n\t};\n\n\tlet open_convo_val = -1;\n\n\t//function expects res to be response from\n\t//server providing a message object\n\tconst create_message_obj = (res)=>{\n\t\tlet rv = Object.create(message_obj_prototype);\n\t\trv.sender = res.sender;\n\t\t//add decryption here later\n\t\trv.contents = res.digest;\n\t\trv.time = get_fmtted_time(new Date(res.time));\n\t\trv.from_you = username === res.sender;\n\t\treturn rv;\n\t};\n\n\t//race condition here from spam potentially\n\tconst open_convo = async (id)=>{\n\t\tconst req_obj = {\n\t\t\tauthToken:authToken,\n\t\t\tconversationID:id\n\t\t};\n\t\tlet promise = s_ajax_json_req(req_obj, '/messages_req');\n\t\tlet res_obj;\n\t\ttry{\n\t\t\tres_obj = await promise;\n\t\t}\n\t\tcatch(err){\n\t\t\talert(err.message);\n\t\t\treturn;\n\t\t}\n\t\tmessage_list = [];\n\t\tlet arr = res_obj.messageObjects;\n\t\tfor(let i = 0; i < arr.length; i++){\n\t\t\tlet new_message_obj = create_message_obj(arr[i]);\n\t\t\tmessage_list.push(new_message_obj);\n\t\t}\n\t\tmessage_list = message_list;\n\t\tmessages_ref.scrollTop = messages_ref.scrollHeight;\n\t}\n\n\tconst convo_change = (index) =>{\n\t\tif(index == -1) return;\n\t\t//update conversation with new colour\n\t\tconversation_list = conversation_list;\n\t\topen_convo(conversation_list[index].id);\n\t}\n\t$: convo_change(open_convo_val);\n\n\tconst req_send_msg = async(convo_obj, msg) =>{\n\t\tconst req_obj = {\n\t\t\tauthToken:authToken,\n\t\t\tconversationID:convo_obj.id,\n\t\t\tdigests:{\n\t\t\t\tuserDigests:[],\n\t\t\t\tdeviceDigests:[]\n\t\t\t}\n\t\t};\n\t\tfor(let i = 0; i < convo_obj.keys.userKeys.length; i++){\n\t\t\treq_obj.digests.userDigests.push({\n\t\t\t\tid:convo_obj.keys.userKeys[i].id,\n\t\t\t\t//add encryption here later\n\t\t\t\tdigest:msg\n\t\t\t});\n\t\t}\n\t\tfor(let i = 0; i < convo_obj.keys.deviceKeys.length; i++){\n\t\t\treq_obj.digests.deviceDigests.push({\n\t\t\t\tid:convo_obj.keys.deviceKeys[i].id,\n\t\t\t\t//add encryption here later\n\t\t\t\tdigest:msg\n\t\t\t});\n\t\t}\n\t\tlet promise = s_ajax_json_req(req_obj, '/msg_create');\n\t\tlet res_obj;\n\t\ttry{\n\t\t\tres_obj = await promise;\n\t\t}\n\t\tcatch(err){\n\t\t\talert(err.message);\n\t\t\treturn;\n\t\t}\n\t};\n\n\tconst send_msg = () =>{\n\t\tif(open_convo_val == -1) return;\n\t\tlet convo_obj = conversation_list[open_convo_val];\n\t\tif(curr_message.length == 0 || !curr_message) return;\n\t\tlet new_message = Object.create(message_obj_prototype);\n\t\treq_send_msg(convo_obj, curr_message);\n\t\tcurr_message = '';\n\t};\n\n\t//socket handling begin\n\tconst socket = io_wrapper.io('/');\n\tsocket.on('auth_req', ()=>{\n\t\tsocket.emit('auth_res', authToken);\n\t});\n\tsocket.on('auth_status', (status)=>{\n\t\tif(status!=='accepted'){\n\t\t\tconsole.error('socket responded with status: ', status);\n\t\t\tsocket.close();\n\t\t}\n\t})\n\tsocket.on('new_message', (convo_id, message_obj)=>{\n\t\tlet msg_obj = create_message_obj(message_obj);\n\t\tif(conversation_list[open_convo_val].id == convo_id){\n\t\t\tmessage_list.push(msg_obj);\n\t\t\tmessage_list = message_list;\n\t\t\tmessages_ref.scrollTop = messages_ref.scrollHeight;\n\t\t}\n\t\t//possible race condition with conversation creating at the\n\t\t//same time as the first message is sent\n\t\t//add decryption here eventually\n\t\tconversation_refs[convo_id].last_msg = msg_obj.contents;\n\t\tconversation_list = conversation_list;\n\t});\n\tsocket.on('new_convo', async (convo_obj)=>{\n\t\tconst new_convo_obj = Object.create(conversation_obj_prototype);\n\t\tnew_convo_obj.id = convo_obj.conversationID;\n\t\tnew_convo_obj.name = convo_obj.name;\n\t\tconst req_obj = {\n\t\t\tauthToken:authToken,\n\t\t\tconversationID:new_convo_obj.id\n\t\t};\n\t\tlet promise = s_ajax_json_req(req_obj, '/keys_req');\n\t\tlet keys_obj;\n\t\ttry{\n\t\t\tkeys_obj = await promise;\n\t\t}\n\t\tcatch(err){\n\t\t\treturn console.error(err.message);\n\t\t}\n\t\tnew_convo_obj.keys = keys_obj;\n\t\tnew_convo_obj.last_msg = '';\n\t\tconversation_refs[new_convo_obj.id] = new_convo_obj;\n\t\tconversation_list.push(new_convo_obj);\n\t\tconversation_list = conversation_list;\n\t});\n\t//socket handling end\n\n</script>\n\n<style>\n\t:global(html){\n\t\theight:100%;\n\t}\n\t:global(body){\n\t\theight:100%;\n\t\tmargin:0px;\n\t\tbackground-color:#000;\n\t}\n\t.add_convo_form_wrapper{\n\t\tvisibility: hidden;\n\t\tz-index: 2;\n\t\tbackground-color: #fff;\n\t\tposition:fixed;\n\t\twidth:600px;\n\t\theight:400px;\n\t\ttop: 50%;\n        left: 50%;\n        margin-top: -200px;\n\t\tmargin-left: -300px;\n\t}\n\t.show{\n\t\tvisibility: visible;\n\t\t-webkit-animation: fadeIn 0.5s;\n\t\tanimation: fadeIn 0.5s;\n\t}\n\t@-webkit-keyframes fadeIn {\n\t\tfrom {opacity: 0;}\n\t\tto {opacity: 1;}\n\t}\n\n\t@keyframes fadeIn {\n\t\tfrom {opacity: 0;}\n\t\tto {opacity:1 ;}\n\t}\n\t.greyout_overlay{\n\t\tvisibility:hidden;\n\t\tz-index:1;\n\t\tbackground-color:#000;\n\t\tposition:fixed;\n\t\twidth:100%;\n\t\theight:100%;\n\t\topacity:0.3;\n\t}\n\t.grey_show{\n\t\tvisibility: visible;\n\t\t-webkit-animation: fadeGrey 0.5s;\n\t\tanimation: fadeGrey 0.5s;\n\t}\n\t@-webkit-keyframes fadeGrey {\n\t\tfrom {opacity: 0;}\n\t\tto {opacity: 0.3;}\n\t}\n\n\t@keyframes fadeGrey {\n\t\tfrom {opacity: 0;}\n\t\tto {opacity:0.3 ;}\n\t}\n\n\t.column{\n\t\theight:100%;\n\t\tfloat:left;\n\t}\n\t.left{\n\t\tbackground-color:#c8c8c8;\n\t\twidth:25%;\n\t}\n\t.right{\n\t\twidth:75%;\n\t}\n\t.row{\n\t\theight:100%;\n\t}\n\t.row:after{\n\t\tcontent:\"\";\n\t\tdisplay: table;\n\t\tclear:both;\n\t}\n\t.conversation_wrapper{\n\t\theight:90%;\n\t\toverflow-y: scroll;\n\t}\n\t.convo_box{\n\t\theight:60px;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\tbackground-color:#aaa;\n\t}\n\t.convo_box .header{\n\t\tfont-size:16px;\n\t\tfont-weight: bold;\n\t\ttext-overflow: ellipsis;\n\t}\n\t.convo_box .msg{\n\t\tfont-size:13px;\n\t\ttext-overflow: ellipsis;\n\t}\n\t.convo_box .alternate{\n\t\tbackground-color:#ddd;\n\t}\n\t.messages{\n\t\tcolor:#fff;\n\t\theight:80%;\n\t\toverflow-y: scroll;\n\t}\n\t.input_area{\n\t\tpadding:5px;\n\t\theight:20%;\n\t}\n\t.message_input{\n\t\tfont-size:16px;\n\t\twidth:100%;\n\t\theight:80%;\n\t\tbackground-color:#444;\n\t\tcolor:#fff;\n\t}\n\t.add_convo_wrapper{\n\t\twidth:100%;\n\t\theight:10%;\n\t\ttext-align:center;\n\t}\n\t.add_convo_wrapper button{\n\t\tpadding:5px, 5px, 5px, 5px;\n\t\tline-height: 100%;\n\t\tdisplay:inline-block;\n\t\theight:100%;\n\t\twidth:100%;\n\t\tfont-size:30px;\n\t}\n\t.convo_radio_wrapper{\n\t\tappearance:none;\n\t\t-webkit-appearance: none;\n  \t\t-moz-appearance: none;\n  \t\tposition:fixed;\n\t}\n</style>\n\n\n<div class=\"greyout_overlay\" class:grey_show={display_add_account} on:click={close_add}></div>\n<div class=\"add_convo_form_wrapper\" class:show={display_add_account}>\n\t<form on:submit|preventDefault={create_convo}>\n\t\tUser(s):<input type=\"text\" placeholder=\"steve85, joeseph42, ...\" bind:value={participants}>\n\t\tChat Name:<input type=\"text\" placeholder=\"friday sesh\" bind:value={new_conversation_name}>\n\t\t<button type=\"submit\">Create Chat</button>\n\t</form>\n</div>\n<div class=\"row\">\n\t<div class=\"column left\">\n\t\t<div class=\"add_convo_wrapper\">\n\t\t\t<button on:click={display_add}>+</button>\n\t\t</div>\n\t\t<div class=\"conversation_wrapper\">\n\t\t\t{#each conversation_list as conversation, index}\n\t\t\t<label>\n\t\t\t<div class=\"convo_box\" style={(index == open_convo_val) ? \"background-color:#bde\" : (index % 2 == 0) ? \"background-color:#ddd\" : \"\"}>\n\t\t\t\t<input type=radio class=\"convo_radio_wrapper\" bind:group={open_convo_val} value={index}>\n\t\t\t\t<ul style=\"list-style-type:none;\">\n\t\t\t\t\t<li class=\"header\">{conversation.name}</li>\n\t\t\t\t\t<li class=\"msg\">{conversation.last_msg}</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t</label>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n\t<div class=\"column right\">\n\t\t<div class=\"messages\" bind:this={messages_ref}>\n\t\t\t<ul style=\"list-style-type:none;\">\n\t\t\t{#each message_list as message}\n\t\t\t<li style={(message.from_you) ? \"color:#f55;\" : \"\"}>{message.time}@{message.sender}&gt; {message.contents}</li>\n\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"input_area\">\n\t\t\t<form style=\"height:100%;\" on:submit|preventDefault={send_msg}>\n\t\t\t<input type=\"text\" class=\"message_input\" bind:value={curr_message}>\n\t\t\t<input type=\"submit\" style=\"display:none;\">\n\t\t\t</form>\n\t\t</div>\n\t</div>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}